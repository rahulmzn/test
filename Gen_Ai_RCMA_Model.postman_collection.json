{
	"info": {
		"_postman_id": "4a0c8e76-b3ee-484a-bbe2-031cc801a934",
		"name": "GCP",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "01- Vector Search Query",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// var query = {};",
							"// pm.request.url.query.all().forEach((param) => { query[param.key] = param.value});",
							"",
							"// pm.globals.set(\"user_query_seached\", query[\"user_query\"])",
							"",
							"var jsonData = pm.response.json()",
							"    var text=\"\"",
							"    for (var i = 0; i < jsonData.result.length; i++)",
							"    {",
							"    var metadata = jsonData.result[i][\"metadata\"];",
							"    text +=metadata[\"text\"]",
							"    // console.log(\"After add added \\n \"+metadata[\"text\"])",
							"    }",
							"",
							"    pm.globals.set(\"chunk_text\", text);",
							"    console.log(text)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"user_query = ",
							"",
							"\"provide prompt to fetch Industry drivers key points in general insurance industry sector\"",
							"",
							"",
							"",
							"pm.globals.set(\"user_query\", user_query)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer ya29.a0AfB_byAZakC8XC94epPsq4dMIzCg0rs8uVm_S-lz8edcrX4TSkxKZfEWbI43S680uNMSBZ33bI-98YK7iZaddni9_RrZ2WHpkGOgg3-vrXNlXwN3y4hxMvZ2OHtvseOsEWKK0BsXnDABI1iSKVapLQy_-j_wh0-bAefQpjs7FxQ0aCgYKAfsSARISFQHGX2MixkK4YUk9B3WR_963dHEgWg0179"
					},
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8"
					}
				],
				"url": {
					"raw": "http://35.204.189.87/api/search?user_query=Retrieve key points on industry drivers in the general insurance sector. Include factors such as technological advancements, regulatory changes, market trends, and customer preferences. Present the information in JSON format.",
					"protocol": "http",
					"host": [
						"35",
						"204",
						"189",
						"87"
					],
					"path": [
						"api",
						"search"
					],
					"query": [
						{
							"key": "user_query",
							"value": "{{user_query}}",
							"disabled": true
						},
						{
							"key": "user_query",
							"value": "Retrieve key points on industry drivers in the general insurance sector. Include factors such as technological advancements, regulatory changes, market trends, and customer preferences. Present the information in JSON format."
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "02- Execute LLM",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var template = `",
							"<script src=\"https://d3js.org/d3.v5.min.js\"></script>",
							"<style>",
							"body {",
							"    display: flex;",
							"    align-items: center;",
							"    justify-content: center;",
							"    background-color: #F5F5F5;",
							"   ",
							"}",
							"",
							"",
							".container {",
							"    position: absolute;",
							"    z-index: -999;",
							"    height: 100vh;",
							"    width: 100vw;",
							"}",
							"",
							"</style>",
							"<div id=\"tree\"></div>",
							"<div class=\"container\">",
							"<script>",
							"const treeData = {{{results}}};",
							"var maxChildren = 0;",
							"var treeLevelSpan = {0:1};",
							"",
							"//finds the max number of nodes in a column",
							"function getMaxChildrenSpan(input, level) {",
							"    var childrenLength = 0;",
							"    if (input.hasOwnProperty(\"children\") && input[\"children\"] != null && typeof input[\"children\"] != undefined ) {",
							"        childrenLength =  input.children.length;",
							"    }",
							"    let totalNumChildren = 0;",
							"    if (input.hasOwnProperty(\"children\") && input[\"children\"] != null && typeof input[\"children\"] != undefined) {",
							"        for (let child of input.children) {",
							"            if (child.hasOwnProperty(\"children\") && child[\"children\"] != null && typeof child[\"children\"] != undefined) {",
							"                getMaxChildrenSpan(child, level + 1)",
							"            }",
							"        }",
							"    }",
							"    if (level in treeLevelSpan) {",
							"        treeLevelSpan[level] += childrenLength;",
							"    }",
							"    else {",
							"        treeLevelSpan[level] = childrenLength;",
							"    }",
							"}",
							"getMaxChildrenSpan(treeData, 1);",
							"let arrayOfLevelSpan = Object.values(treeLevelSpan)",
							"let maxSpan = Math.max(...arrayOfLevelSpan);",
							"",
							"",
							"// Set the dimensions and margins of the diagram",
							"var margin = {top: 20, right: 90, bottom: 30, left:90},",
							"    width = 960 - margin.left - margin.right,",
							"    height = 500 + (maxSpan*30) - margin.top - margin.bottom;",
							"",
							"",
							"",
							"// append the svg object to the body of the page",
							"// appends a 'group' element to 'svg'",
							"// moves the 'group' element to the top left margin",
							"var svg = d3.select(\"body\").append(\"svg\")",
							"    .attr(\"width\", width + margin.right + margin.left)",
							"    .attr(\"height\", height + margin.top + margin.bottom)",
							"    .append(\"g\")",
							"        .attr(\"transform\", \"translate(\"",
							"            + margin.left  + \",\" + margin.top + \")\");",
							"",
							"",
							"var i = 0,",
							"    duration = 750,",
							"    root;",
							"",
							"// declares a tree layout and assigns the size",
							"var treemap = d3.tree().size([height, width]);",
							"",
							"// Assigns parent, children, height, depth",
							"root = d3.hierarchy(treeData, function(d) { return d.children; });",
							"root.x0 = height / 2;",
							"root.y0 = 0;",
							"",
							"// Collapse after the second level",
							"// root.children.forEach(collapse);",
							"",
							"update(root);",
							"",
							"// Collapse the node and all it's children",
							"function collapse(d) {",
							"  if(d.children) {",
							"    d._children = d.children",
							"    d._children.forEach(collapse)",
							"    d.children = null",
							"  }",
							"}",
							"",
							"function update(source) {",
							"  // Assigns the x and y position for the nodes",
							"  var treeData = treemap(root);",
							"  ",
							"  //svg height dynamically changed by max number of open nodes in a column",
							"  treeLevelSpan = {};",
							"  getMaxChildrenSpan(root, 1);",
							"  arrayOfLevelSpan = Object.values(treeLevelSpan)",
							"  maxSpan = Math.max(...arrayOfLevelSpan);",
							"  height = 500 + (maxSpan*30) - margin.top - margin.bottom;",
							"  treeData = d3.tree().size([height, width])(root);",
							"",
							"",
							"  // Compute the new tree layout.",
							"  var nodes = treeData.descendants(),",
							"      links = treeData.descendants().slice(1);",
							"",
							"  // Normalize for fixed-depth.",
							"  nodes.forEach(function(d) { d.y = d.depth * width * 0.25 });",
							"",
							"  // ****************** Nodes section ***************************",
							"",
							"  // Update the nodes...",
							"  var node = svg.selectAll('g.node')",
							"      .data(nodes, function(d) {return d.id || (d.id = ++i); });",
							"",
							"  // Enter any new nodes at the parent's previous position.",
							"  var nodeEnter = node.enter().append('g')",
							"      .attr('class', 'node')",
							"      .attr(\"transform\", function(d) {",
							"        return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";",
							"    })",
							"    .on('click', click);",
							"    ",
							"    // Create hover tooltip",
							"    let tooltip = d3.select(\"#tree\").append(\"div\")",
							"        .attr(\"class\", \"tooltip\")",
							"            .style(\"z-index\", 99)",
							"            .style(\"position\", \"absolute\")",
							"            .style(\"font-size\", \"12px\")",
							"            .style(\"width\", \"auto\")",
							"            .style(\"height\", \"auto\")",
							"            .style(\"pointer-events\", \"none\")",
							"            .style(\"background-color\", \"white\")",
							"            .style(\"padding\", \"3px\")",
							"            .style(\"opacity\", 1);",
							"        ",
							"    // tooltip mouseover event handler",
							"    let tipMouseover = function(d) {",
							"        console.log(d);",
							"        tooltip.html(\"Data Type: <br/>\" + d.data.type)",
							"            .style(\"left\", (d3.event.pageX + 40) + \"px\")",
							"            .style(\"top\", (d3.event.pageY - 15) + \"px\")",
							"          .transition()",
							"            .duration(200)      // ms",
							"            .style(\"opacity\", 1)",
							"    };",
							"    // tooltip mouseout event handler",
							"    let tipMouseout = function(d){",
							"        tooltip.transition()",
							"            .duration(300)",
							"            .style(\"opacity\", 0);",
							"    };",
							"    ",
							"  // Add Circle for the nodes",
							"  nodeEnter.append('circle')",
							"      .attr('class', 'node')",
							"      .attr('r', 1e-6)",
							"      .on(\"mouseover\", tipMouseover)",
							"      .on(\"mouseout\", tipMouseout)",
							"      .style(\"fill\", function(d) {",
							"          return d._children ? \"#F4B780\" : \"#fff\";",
							"      })",
							"      ",
							"      .style(\"fill\", \"#F5F5F5\")",
							"      .style(\"stroke\", \"#F09D51\")",
							"      .style(\"stroke-width\", \"2px\");",
							"      ",
							"      ",
							"",
							"  // Add labels for the nodes",
							"  nodeEnter.append('text')",
							"      .attr(\"dy\", \".35em\")",
							"      .attr(\"x\", function(d) {",
							"          return d.children || d._children ? -20 : 20;",
							"      })",
							"      .attr(\"text-anchor\", function(d) {",
							"          return d.children || d._children ? \"end\" : \"start\";",
							"      })",
							"      .text(function(d) { return d.data.name; });",
							"      ",
							"      ",
							"",
							"  // UPDATE",
							"  var nodeUpdate = nodeEnter.merge(node);",
							"",
							"  // Transition to the proper position for the node",
							"  nodeUpdate.transition()",
							"    .duration(duration)",
							"    .attr(\"transform\", function(d) { ",
							"        return \"translate(\" + d.y + \",\" + d.x +\")\";//this",
							"     });",
							"",
							"  // Update the node attributes and style",
							"  nodeUpdate.select('circle.node')",
							"    .attr('r', 10)",
							"    .style(\"fill\", function(d) {",
							"        return d._children ? \"#F4B780\" : \"#F5F5F5\";",
							"    })",
							"    .attr('cursor', 'pointer');",
							"",
							"",
							"  // Remove any exiting nodes",
							"  var nodeExit = node.exit().transition()",
							"      .duration(duration)",
							"      .attr(\"transform\", function(d) {",
							"          return \"translate(\" + source.y + \",\" + source.x + \")\"; ",
							"      })",
							"      .remove();",
							"",
							"  // On exit reduce the node circles size to 0",
							"  nodeExit.select('circle')",
							"    .attr('r', 0);",
							"",
							"  // On exit reduce the opacity of text labels",
							"  nodeExit.select('text')",
							"    .style('fill-opacity', 0);",
							"",
							"  // ****************** links section ***************************",
							"",
							"  // Update the links...",
							"  var link = svg.selectAll('path.link') ",
							"      .data(links, function(d) { return d.id; });",
							"",
							"  // Enter any new links at the parent's previous position.",
							"  var linkEnter = link.enter().insert('path', \"g\")",
							"      .attr(\"class\", \"link\")",
							"      .attr('d', function(d){",
							"        var o = {x: source.x0, y: source.y0}",
							"        return diagonal(o, o)",
							"      })",
							"      .style(\"fill\", \"none\")",
							"      .style(\"stroke\",\"#c5c5c5\")",
							"      .style(\"stroke-width\", \"1px\");",
							"",
							"  // UPDATE",
							"  var linkUpdate = linkEnter.merge(link);",
							"",
							"  // Transition back to the parent element position",
							"  linkUpdate.transition()",
							"      .duration(duration)",
							"      .attr('d', function(d){ return diagonal(d, d.parent) });",
							"",
							"  // Remove any exiting links",
							"  var linkExit = link.exit().transition()",
							"      .duration(duration)",
							"      .attr('d', function(d) {",
							"        var o = {x: source.x, y: source.y}",
							"        return diagonal(o, o)",
							"      })",
							"      .remove();",
							"",
							"  // Store the old positions for transition.",
							"  ",
							"  nodes.forEach(function(d){",
							"    d.x0 = d.x;",
							"    d.y0 = d.y;",
							"  });",
							"\\",
							"  // Creates a curved (diagonal) path from parent to the child nodes",
							"  function diagonal(s, d) {",
							"    path = \"M \" + s.y +\" \" + s.x + \" \" +",
							"           \"C \" + (s.y + d.y)/2 + \" \" + s.x +\", \"",
							"        +  (s.y + d.y)/2 +\" \" + d.x + \" , \"",
							"        +  d.y + \" \" + d.x;",
							"    return path;",
							"  }",
							"",
							"  // Toggle children on click.",
							"  function click(d) {",
							"    if (d.children) {",
							"        d._children = d.children;",
							"        d.children = null;",
							"      } else {",
							"        d.children = d._children;",
							"        d._children = null;",
							"      }",
							"    update(d);",
							"  }",
							" ",
							"}",
							"",
							"</script>",
							"`;",
							"",
							"/* DATA PARSING */",
							"const response = pm.response.json();",
							"",
							"function parseData(jsonInput) {",
							"    // Function that checks if object is a dictionary",
							"    function isDictionary(obj) {",
							"        if (typeof obj == \"object\" && !Array.isArray(obj) && obj !== null) {",
							"            return true;",
							"        } else {",
							"            return false;",
							"        }",
							"    }",
							"    ",
							"    // Declare and initialize the root node",
							"    const dataTree = {};",
							"    ",
							"    dataTree[\"name\"] = \"response\";",
							"    dataTree[\"children\"] = [];",
							"    dataTree[\"type\"] = typeof(dataTree);",
							"    ",
							"    // Recursively reformats the json file ",
							"    // See documentation for format",
							"    function restructure(input, arr) {",
							"        for (let node in input) {",
							"            const dict = {};",
							"            if (isDictionary(input[node])) {",
							"                dict.name = node;",
							"                dict.type = \"dictionary\"",
							"                dict.children = [];",
							"                restructure(input[node], dict.children);",
							"            } else {",
							"                if (Array.isArray(input[node])) {",
							"                    dict.type = \"array\";              ",
							"                }",
							"                else if (input[node] === null) {",
							"                    dict.type = \"null\";",
							"                }",
							"                else {",
							"                    dict.type = typeof(input[node]);",
							"                }",
							"                dict.name = node;",
							"            }",
							"            arr.push(dict);",
							"        }",
							"    }",
							"    ",
							"    // Calls restructure on the first object in the response",
							"    restructure(jsonInput, dataTree.children);",
							"    ",
							"    return dataTree",
							"    ",
							"}",
							"",
							"/* FEED DATA INTO TEMPLATE */",
							"pm.visualizer.set(template, {",
							"  // Template will receive stringified JSON",
							"  ",
							"  /* EDIT THIS LINE: Here we grab the first object from the reponse dictionary as all",
							"    objects in the dictionary have the same structure */",
							"  results: JSON.stringify(parseData(response.llm_outcome[0]))",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer ya29.a0AfB_byAZakC8XC94epPsq4dMIzCg0rs8uVm_S-lz8edcrX4TSkxKZfEWbI43S680uNMSBZ33bI-98YK7iZaddni9_RrZ2WHpkGOgg3-vrXNlXwN3y4hxMvZ2OHtvseOsEWKK0BsXnDABI1iSKVapLQy_-j_wh0-bAefQpjs7FxQ0aCgYKAfsSARISFQHGX2MixkK4YUk9B3WR_963dHEgWg0179"
					},
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"company\": \"BHSF\",\n    \"data_chunks\": [\n        {\"metadata\": \"{{chunk_text}}}}\"}\n    ],\n    \"prompt\": [\"Retrieve key points on industry drivers in the general insurance sector. Include factors such as technological advancements, regulatory changes, market trends, and customer preferences. Present the information in JSON format as {\\\"key-parameter-name\\\":\\\"key-parameter-value\\\"}\"]\n    \n}\n\n"
				},
				"url": {
					"raw": "http://35.204.158.17/api/search/llm",
					"protocol": "http",
					"host": [
						"35",
						"204",
						"158",
						"17"
					],
					"path": [
						"api",
						"search",
						"llm"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query Handler API",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://34.90.159.248/api/llm?user_query=Retrieve key points on industry drivers in the general insurance sector. Include factors such as technological advancements, regulatory changes, market trends, and customer preferences. Present the information in JSON format.&format",
					"protocol": "http",
					"host": [
						"34",
						"90",
						"159",
						"248"
					],
					"path": [
						"api",
						"llm"
					],
					"query": [
						{
							"key": "user_query",
							"value": "Retrieve key points on industry drivers in the general insurance sector. Include factors such as technological advancements, regulatory changes, market trends, and customer preferences. Present the information in JSON format.",
							"description": "Question which you want LLM to answer for you"
						},
						{
							"key": "format",
							"value": null,
							"description": "Response format In which LLM should response"
						}
					]
				}
			},
			"response": []
		}
	]
}